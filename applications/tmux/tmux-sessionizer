#!/usr/bin/env bash

set -euo pipefail

function usage() {
    cat <<EOF
"Usage: $0 [options] [command]"
    -a:     show all repos
    -w:     show only work repos
    -p:     show only personal repos
    -u:     show only university repos
    -s:     select from open sessions
    -h:     show this help
EOF
    exit 1
}

function list_repos() {
    local -r base_path="$1"

    fd '.git' \
        --hidden \
        --no-ignore \
        --type directory \
        --prune \
        --glob \
        --absolute-path \
        "$base_path" \
        --exec-batch dirname |
        sort --reverse
}

function pick_path() {
    mapfile -t paths

    [[ ${#paths[@]} -eq 0 ]] && return 1

    common_prefix="${paths[0]}"
    for path in "${paths[@]}"; do
        while [[ "$path" != "$common_prefix"* ]]; do
            common_prefix="${common_prefix%/*}"
        done
    done

    local -r selected=$(
        printf "%s\n" "${paths[@]}" |
            sed "s:^$common_prefix/::" |
            fzf
    )

    if [[ -n $selected ]]; then
        echo "$common_prefix/$selected"
    fi
}

function select_session() {
    local -r selected=$(tmux list-sessions -F'#{session_name}' | fzf)

    if [[ -n $selected ]]; then
        tmux switch-client -t "$selected"
    fi
}

while getopts "awpush" opt; do
    case $opt in
    a)
        selected=$(list_repos "$REPOS" | pick_path)
        ;;
    w)
        selected=$(list_repos "$REPOS"/work | pick_path)
        ;;
    p)
        selected=$(list_repos "$REPOS"/personal | pick_path)
        ;;
    u)
        selected=$(list_repos "$REPOS"/unitn | pick_path)
        ;;
    s)
        select_session
        exit 0
        ;;
    h | *)
        usage
        ;;
    esac
done
if [ "$OPTIND" -eq 1 ]; then
    usage
fi

if [[ -z $selected ]]; then
    exit 0
fi

if [[ -e "$selected/.tmuxp.yaml" ]]; then
    tmuxp load -y "$selected/.tmuxp.yaml"
else
    selected_name=$(basename "$selected" | tr . _)
    tmux_running=$(pgrep tmux)

    if [[ -z $TMUX ]] && [[ -z $tmux_running ]]; then
        tmux new-session -s "$selected_name" -c "$selected"
        exit 0
    fi

    if ! tmux has-session -t="$selected_name" 2>/dev/null; then
        tmux new-session -ds "$selected_name" -c "$selected"
    fi

    tmux switch-client -t "$selected_name"
fi
